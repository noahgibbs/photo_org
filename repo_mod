#!/usr/bin/env ruby

require "optparse"
require_relative "photo_repo"

# TODO: tag breakdown mode
# TODO: UI, possibly in new executable

# Normally a tag spec is an alternation of operation (plus or minus) with token (a string.)
# Strings preceded by a plus are required, while strings preceded by a minus are excluded.
# Each photo has a list of tags, and to match they have to have all required tags and no
# excluded tags. The virtual tags "1" and "0" are included to mean "always" and "never"
# respectively - so "+1" means "match anything regardless of tags".
#
# Example tag spec: "+dogs+cows-william-barry"
def tag_spec_to_tags(tag_spec)
  required = []
  disallowed = []

  tokens = tag_spec.split(/([-+])/).map(&:strip)
  tokens.shift if tokens[0] == ""
  tokens.each_slice(2) do |op, token|
    if op == "+"
      required.push token unless token == "1"
    elsif op == "-"
      disallowed.push token unless token == "0"
    else
      raise "Unexpected operation #{op.inspect} (not single +/-) in tag spec: #{tag_spec.inspect}!"
    end
  end

  return required, disallowed
end

options = {
  out: ".",
  tag_spec: nil,
  tag_bool_expr: nil,
  ingest_dirs: [],
  link_type: nil,
  order: nil,
  summary: nil,
}

SUMMARY_TYPES = [ "link_tags", "photo_tags" ]

OptionParser.new do |opts|
  opts.banner = <<USAGE
Usage: repo_mod [options] [directory]

There can only be a single output directory, but any number
of input (ingest) dirs. Options are remembered from run to
run for each output directory, and filters and input
directories are added to the current ones.

USAGE

  opts.on("-o ORDER", "--order ORDER", "Use ORDER as output photo order - by default, no ordering") do |o|
    options[:order] = o
  end

  opts.on("-t TAGSPEC", "--tag-spec TAGSPEC", "Tag specification, use +tag1 -tag2 +tag3 +1 -0 or CLEAR to clear tags") do |t|
    options[:tag_spec] = t
  end

  opts.on("-b TAGBOOLEXPR", "--tag-boolean-expression TAGBOOLEXPR") do |t|
    options[:tag_bool_expr] = t
  end

  opts.on("-i DIR", "--ingest DIR", "Add a directory to always link photos from or -i CLEAR to clear dirs") do |i|
    options[:ingest_dirs] << i
  end

  opts.on("--link-type TYPE", "Link type: symbolic(s) or hard(h) or test(t), default is symbolic") do |t|
    options[:link_type] = t
  end

  opts.on("--summary TYPE", "-s TYPE", "Print summary of links or cache after run, types: #{SUMMARY_TYPES.inspect}") do |t|
    raise "Unknown summary type: #{t.inspect}! Allowed: #{SUMMARY_TYPES.inspect}." unless SUMMARY_TYPES.include?(t)
    options[:summary] = t
  end
end.parse!

# No -o specified? One arg? It's a directory? Treat it as the output directory.
if ARGV.size == 1
  options[:out] = ARGV.pop
end

unless ARGV.empty?
  raise "Unexpected argument(s): #{ARGV.inspect}!"
end

puts "Current dir: #{Dir.pwd.inspect}"
puts "Output dir: #{options[:out].inspect}"

repo = PhotoRepo.new(options[:out])

if options[:ingest_dirs] == ["CLEAR"]
  repo.clear_ingest
else
  options[:ingest_dirs].each do |i|
    repo.always_ingest i
  end
end

if options[:tag_spec]
  if options[:tag_spec] == "CLEAR"
    repo.set_required([])
    repo.set_disallowed([])
  else
    req, dis = tag_spec_to_tags options[:tag_spec]
    repo.add_filter(required: req, disallowed: dis)
  end
end

if options[:tag_bool_expr]
  if options[:tag_bool_expr] == "CLEAR"
    repo.set_bool_expr([])
  else
    repo.add_filter(bool_expr: [options[:tag_bool_expr]])
  end
end

if options[:link_type]
  repo.set_link_type(options[:link_type])
end

if options[:order]
  repo.set_order(options[:order])
end

repo.update_cache
repo.update_links

if options[:summary]
  if options[:summary] == "link_tags"
    summary_tags = {}
    top_level_tags = {}
    repo.links.each do |old_name, new_name|
      t = repo.photos[old_name]["tags"].sort.uniq
      summary_tags[t] ||= 0
      summary_tags[t] += 1
      t.each do |one_tag|
        top_level_tags[one_tag] ||= 0
        top_level_tags[one_tag] += 1
      end
    end

    puts "Tag breakdown for linked photos:"
    summary_tags.keys.sort.each do |tagset|
      tagline = tagset.map { |s| "_#{s}_" }.join(" ")
      puts "#{tagline}: #{summary_tags[tagset]}"
    end
    puts "======"

    puts "Top-level tag breakdown for linked photos:"
    top_level_tags.keys.sort { |t1, t2| top_level_tags[t2] <=> top_level_tags[t1] }.each do |tag|
      puts "#{tag}: #{top_level_tags[tag]}"
    end
    puts "======"

  elsif options[:summary] == "photo_tags"
    summary_tags = {}
    top_level_tags = {}
    repo.photos.each do |filename, info|
      t = info["tags"].sort.uniq
      summary_tags[t] ||= 0
      summary_tags[t] += 1
      t.each do |one_tag|
        top_level_tags[one_tag] ||= 0
        top_level_tags[one_tag] += 1
      end
    end

    puts "Tag breakdown for all photos:"
    summary_tags.keys.sort.each do |tagset|
      tagline = tagset.map { |s| "_#{s}_" }.join(" ")
      puts "#{tagline}: #{summary_tags[tagset]}"
    end
    puts "======"

    puts "Top-level tag breakdown for all photos:"
    top_level_tags.keys.sort { |t1, t2| top_level_tags[t2] <=> top_level_tags[t1] }.each do |tag|
      puts "#{tag}: #{top_level_tags[tag]}"
    end
    puts "======"
  else
    raise "Unknown summary type: #{options[:summary].inspect}!"
  end
end
